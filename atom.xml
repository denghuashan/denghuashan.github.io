<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DreamMaker-HS</title>
  
  <subtitle>勤思善问，可敌良师益友。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://denghs.com/"/>
  <updated>2021-12-02T08:30:15.512Z</updated>
  <id>http://denghs.com/</id>
  
  <author>
    <name>HuaShan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>20211202，今天有点特殊</title>
    <link href="http://denghs.com/2021/12/02/symmetry/"/>
    <id>http://denghs.com/2021/12/02/symmetry/</id>
    <published>2021-12-02T06:36:37.000Z</published>
    <updated>2021-12-02T08:30:15.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="全对称日"><a href="#全对称日" class="headerlink" title="全对称日"></a>全对称日</h2><p><img src="http://dhsmp.nos-eastchina1.126.net/20211202042938-576297.jpg" alt=""></p><p>今天是2012年12月2日，今天的日子正着读反着读都一样——20211202完全对称日。下一次要等到2030年了……<br>对称数在数学上称为回文数，比如101101，即从中间分两边对称的数，这是偶数位的对称。当然也存在于奇位数中的对称，即10101。<br>据计算，从公元纪年开始到2020年02月02日（20200202)总共有514个世界完全对称日。</p><h2 id="判断回文数"><a href="#判断回文数" class="headerlink" title="判断回文数"></a>判断回文数</h2><p>简单介绍了一下回文数，那来说说，在计算机领域中，如何实现判断回文数呢？<br>刚刚介绍回文数的时候，说到正着读反着读都一样，其实也可以说正着写反着写都一样。</p><h3 id="判断int回文数。"><a href="#判断int回文数。" class="headerlink" title="判断int回文数。"></a>判断int回文数。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年3月5日 下午4:52:12</div><div class="line"> * <span class="doctag">@remark</span> 判断回文数</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Symmetry</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"symmetry---&gt; int:"</span> + symmetry(<span class="number">20211202</span>));</div><div class="line">System.out.println(<span class="string">"symmetry---&gt; int:"</span> + symmetry(<span class="number">2021202</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断一个数值是否是回文数。回文的特点是：正着写反着写都一样</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> number</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">symmetry</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> record = number;<span class="comment">// 保存原记录数</span></div><div class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">i = number % <span class="number">10</span>;</div><div class="line">sum = sum * <span class="number">10</span> + i;</div><div class="line">number /= <span class="number">10</span>;</div><div class="line"><span class="keyword">if</span> (number == <span class="number">0</span>)</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 判断倒过来写的数，是否跟原来的数是一样的。</span></div><div class="line"><span class="keyword">if</span> (sum == record) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看出，这段代码的最关键的地方就在while循环中。利用十进制取余数的方式，把原来的数重新计算成一个倒过来的数，再把原来的数与倒过来的数进行比较，相等时，则为回文数。<br><img src="http://dhsmp.nos-eastchina1.126.net/20211202033555-217204.png" alt=""></p><h3 id="判断String回文数-一-。"><a href="#判断String回文数-一-。" class="headerlink" title="判断String回文数(一)。"></a>判断String回文数(一)。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年3月5日 下午4:52:12</div><div class="line"> * <span class="doctag">@remark</span> 判断回文数</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Symmetry</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"symmetry---&gt; String:"</span> + symmetry(<span class="string">"20211202"</span>));</div><div class="line">System.out.println(<span class="string">"symmetry---&gt; String:"</span> + symmetry(<span class="string">"2021202"</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断一个串是否是回文串。回文的特点是：倒着写跟原来是一样的。</div><div class="line"> * 使用栈的方式，进行比较。如果串的长度是一个奇数，会存在一个中间数没有对应的数进行比较。</div><div class="line"> * 则会返回false</div><div class="line"> * <span class="doctag">@param</span> string</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">symmetry</span><span class="params">(String string)</span> </span>&#123;</div><div class="line"><span class="comment">// 获取串字符的长度</span></div><div class="line"><span class="keyword">char</span>[] charArray = string.toCharArray();</div><div class="line"><span class="comment">// 初始化栈</span></div><div class="line">Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;(charArray.length / <span class="number">2</span> + <span class="number">1</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length / <span class="number">2</span>; i++) &#123;</div><div class="line"><span class="comment">// 前一半的字符放入栈中</span></div><div class="line">stack.push(charArray[i]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = charArray.length / <span class="number">2</span>; j &lt; charArray.length; j++) &#123;</div><div class="line">Character character = stack.pop();</div><div class="line"><span class="comment">// 栈内已经没有元素了或者有字符不相同</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == character || character != charArray[j]) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>字符串判断回文数的一种方式，使用栈的方式来进行比较，把一个字符串从中间分开，把前一半的字符依次放入栈中，然后遍历后一半的字符，依次进行比较。<br><img src="http://dhsmp.nos-eastchina1.126.net/20211202035217-374087.jpg" alt=""><br>可以看出，这种判断方式，只适合偶数位的回文数，而奇数位的回文数，则判断不出来。</p><h3 id="判断String回文数-二-。"><a href="#判断String回文数-二-。" class="headerlink" title="判断String回文数(二)。"></a>判断String回文数(二)。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年3月5日 下午4:52:12</div><div class="line"> * <span class="doctag">@remark</span> 判断回文数</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Symmetry</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"symmetryStr---&gt; String:"</span> + symmetryStr(<span class="string">"20211202"</span>));</div><div class="line">System.out.println(<span class="string">"symmetryStr---&gt; String:"</span> + symmetryStr(<span class="string">"2021202"</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断一个串是否是回文串。回文的特点是：倒着写跟原来是一样的。</div><div class="line"> * <span class="doctag">@param</span> string</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">symmetryStr</span><span class="params">(String string)</span> </span>&#123;</div><div class="line"><span class="keyword">char</span>[] charArray = string.toCharArray();</div><div class="line"><span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> end = charArray.length - <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (start &lt;= end) &#123;</div><div class="line"><span class="keyword">if</span> (charArray[start] != charArray[end]) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line">start++;</div><div class="line">end--;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>直接两个指针，一个前一个后，前后指针所对应的值比较一次，相等，前指针往后挪一位，后指针往前挪一位，当两个指针彼此过界时，结束比较。<br><img src="http://dhsmp.nos-eastchina1.126.net/20211202040352-754869.jpg" alt=""></p><h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><p>说了3种实现回文数判断的方式，其实都是对完全对称特别的实现。那接下来说说常见的判断左右符号对称的实现。主要的实现思路，其实是使用判断String回文数(一)的方式，使用栈这种方式来实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span></div><div class="line"> * <span class="doctag">@author</span> Denghs</div><div class="line"> * <span class="doctag">@version</span> 1.0,2018年4月5日 下午12:06:32</div><div class="line"> * <span class="doctag">@remark</span></div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStack</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">// 左符号集合</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Character&gt; LEFT_MARKS = Arrays.asList(<span class="keyword">new</span> Character[]&#123; <span class="string">'('</span>, <span class="string">'（'</span>, <span class="string">'['</span>, <span class="string">'【'</span>, <span class="string">'&#123;'</span> ,<span class="string">'&lt;'</span> , <span class="string">'《'</span>&#125;);</div><div class="line"><span class="comment">// 完整符号集合</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; MARKS = Arrays.asList(<span class="keyword">new</span> String[]&#123; <span class="string">"()"</span>, <span class="string">"（）"</span>, <span class="string">"[]"</span>, <span class="string">"【】"</span>, <span class="string">"&#123;&#125;"</span> ,<span class="string">"&lt;&gt;"</span> , <span class="string">"《》"</span>&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"matchByStack---&gt;"</span> + matchByStack(<span class="string">"()()"</span>));</div><div class="line">System.out.println(<span class="string">"matchByLinkedList---&gt;"</span> + matchByLinkedList(<span class="string">"(&lt;&gt;)"</span>));</div><div class="line">System.out.println(<span class="string">"matchByStack---&gt;"</span> + matchByStack(<span class="string">"()[]"</span>));</div><div class="line">System.out.println(<span class="string">"matchByStack---&gt;"</span> + matchByStack(<span class="string">"([])"</span>));</div><div class="line">System.out.println(<span class="string">"matchByStack---&gt;"</span> + matchByStack(<span class="string">"(&#123;&#125;[])"</span>));</div><div class="line">System.out.println(<span class="string">"matchByStack---&gt;"</span> + matchByStack(<span class="string">"(&#123;[]&#125;)"</span>));</div><div class="line">System.out.println(<span class="string">"matchByStack---&gt;"</span> + matchByStack(<span class="string">"(&#123;][&#125;)"</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用栈空间，对括号进行匹配比较。()()、(())、()[]、([])、(&#123;&#125;[])</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> str</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">matchByStack</span><span class="params">(String str)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == str || <span class="string">""</span>.equals(str)) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line">Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</div><div class="line"><span class="comment">// 获取字符串中的char数组</span></div><div class="line"><span class="keyword">char</span>[] charArray = str.toCharArray();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length; i++) &#123;</div><div class="line"><span class="keyword">char</span> ch = charArray[i];</div><div class="line"><span class="keyword">boolean</span> equals = LEFT_MARKS.contains(ch);</div><div class="line"><span class="keyword">if</span>(equals)&#123;</div><div class="line"><span class="comment">//左括号，入栈</span></div><div class="line">stack.push(ch);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="comment">//栈内没左括号元素</span></div><div class="line"><span class="keyword">if</span>(stack.isEmpty())&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//右括号，出栈并与当前元素进行比较</span></div><div class="line">Character pop = stack.pop();</div><div class="line"><span class="comment">//组成一个完整括号集</span></div><div class="line">String tmep = pop.toString() + String.valueOf(ch);</div><div class="line">equals = MARKS.contains(tmep);</div><div class="line"><span class="keyword">if</span>(!equals)&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> stack.isEmpty();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用链表空间，对括号进行匹配比较。()()、(())、()[]、([])、(&#123;&#125;[])</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> str</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">matchByLinkedList</span><span class="params">(String str)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == str || <span class="string">""</span>.equals(str)) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line">LinkedList&lt;Character&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;Character&gt;();</div><div class="line"><span class="comment">// 获取字符串中的char数组</span></div><div class="line"><span class="keyword">char</span>[] charArray = str.toCharArray();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length; i++) &#123;</div><div class="line"><span class="keyword">char</span> ch = charArray[i];</div><div class="line"><span class="keyword">boolean</span> equals = LEFT_MARKS.contains(ch);</div><div class="line"><span class="keyword">if</span>(equals)&#123;</div><div class="line"><span class="comment">//左括号，入栈</span></div><div class="line">linkedList.push(ch);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="comment">//栈内没左括号元素</span></div><div class="line"><span class="keyword">if</span>(linkedList.isEmpty())&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//右括号，出栈并与当前元素进行比较</span></div><div class="line">Character pop = linkedList.pop();</div><div class="line"><span class="comment">//组成一个完整括号集</span></div><div class="line">String tmep = pop.toString() + String.valueOf(ch);</div><div class="line">equals = MARKS.contains(tmep);</div><div class="line"><span class="keyword">if</span>(!equals)&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> linkedList.isEmpty();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;全对称日&quot;&gt;&lt;a href=&quot;#全对称日&quot; class=&quot;headerlink&quot; title=&quot;全对称日&quot;&gt;&lt;/a&gt;全对称日&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://dhsmp.nos-eastchina1.126.net/20211202042938-5
      
    
    </summary>
    
      <category term="Java" scheme="http://denghs.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>坦克大战</title>
    <link href="http://denghs.com/2021/07/08/tank/"/>
    <id>http://denghs.com/2021/07/08/tank/</id>
    <published>2021-07-08T12:49:15.000Z</published>
    <updated>2021-07-08T14:08:35.596Z</updated>
    
    <content type="html"><![CDATA[<p>很早期时写过的代码了，花了一个多星期的时间才写出这个坦克大战。有点小意思，所以想用文字的方式复述一下当时完成这个小游戏过程，以及当时遇到的一些困难。</p><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p><img src="http://dhsmp.nos-eastchina1.126.net/20200820084042-32685.gif" alt=""></p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>从整个坦克大战的游戏所拥有的元素进行思考，需要哪些对象来支持。<br>主要元素：<br>1、坦克<br>2、炮弹<br>次要元素：<br>1、开始按钮、开始页、游戏地图。<br>游戏流程：<br>1、1个坦克一次不能发出超过5个炮弹。<br>2、坦克不能开出地图。<br>3、炮弹打中己方无效，打中敌方，敌方消失。<br>4、坦克之间的行进，不能重叠。</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="http://dhsmp.nos-eastchina1.126.net/20210602101119-640509.jpg" alt=""></p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="http://dhsmp.nos-eastchina1.126.net/20210708074531-614983.png" alt=""><br>主要的核心点，在于使用Thread，产生子线程，并使各个子线程间进行相互通信。因run()的返回值是void类型，所以也使用了单例中的懒汉式，方便拿到各个子线程，对其进行控制。</p><h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><p>MyPanel<br><img src="http://dhsmp.nos-eastchina1.126.net/20210708074938-737399.jpg" alt=""><br><img src="http://dhsmp.nos-eastchina1.126.net/20210708075438-565008.jpg" alt=""></p><p>EnemyTank<br><img src="http://dhsmp.nos-eastchina1.126.net/20210708075044-592176.jpg" alt=""></p><p>Bullet<br><img src="http://dhsmp.nos-eastchina1.126.net/20210708075149-505896.jpg" alt=""></p><p>ShareData<br><img src="http://dhsmp.nos-eastchina1.126.net/20210708075245-448864.jpg" alt=""></p><h2 id="线程消耗"><a href="#线程消耗" class="headerlink" title="线程消耗"></a>线程消耗</h2><p><img src="http://dhsmp.nos-eastchina1.126.net/20210708080145-278845.jpg" alt=""></p><p><img src="http://dhsmp.nos-eastchina1.126.net/20210708080032-642053.jpg" alt=""></p><h2 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h2><p>FutureTask是JDK1.5以后concurrent包中的类。之所以想写这个，是因为在没看源码之前，使用FutureTask，它居然能有返回值。百思不得其解，明明Thread的run()是void类型，为何使用FutureTask居然有返回值，难道JDK1.5之后关于线程，重新写了。直到看了源码以后，发现FutureTask的run()，其实跟我写的这个小游戏，线程之间产生通信的方式，思想都是相通的。<br><img src="http://dhsmp.nos-eastchina1.126.net/20210708083037-278523.jpg" alt=""><br>在执行Callable的call()函数后，把返回值存了起来。而存起来的方式，是在FutureTask中定义了一个类型为Object的成员变量outcome进行接收，而在get()函数中，对outcome按泛型的具体类型进行强转进行返回。<br><img src="http://dhsmp.nos-eastchina1.126.net/20210708083809-719024.jpg" alt=""></p><p><img src="http://dhsmp.nos-eastchina1.126.net/20210708083836-916815.jpg" alt=""></p><p>而在坦克大战中，坦克、子弹能够消亡，也是在类中定义了一个boolean类型的成员变量run，来控制线程的执行。<br><img src="http://dhsmp.nos-eastchina1.126.net/20210708084315-419155.jpg" alt=""><br>一旦触发相应的逻辑时，通过ShareData拿到对应的线程实例，把该线程实例中的成员变量run置位false，让该线程消亡。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很早期时写过的代码了，花了一个多星期的时间才写出这个坦克大战。有点小意思，所以想用文字的方式复述一下当时完成这个小游戏过程，以及当时遇到的一些困难。&lt;/p&gt;
&lt;h2 id=&quot;效果演示&quot;&gt;&lt;a href=&quot;#效果演示&quot; class=&quot;headerlink&quot; title=&quot;效果
      
    
    </summary>
    
      <category term="Java" scheme="http://denghs.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>年年岁岁，岁岁年年（2020）</title>
    <link href="http://denghs.com/2021/02/04/look-back-2020/"/>
    <id>http://denghs.com/2021/02/04/look-back-2020/</id>
    <published>2021-02-04T07:43:40.000Z</published>
    <updated>2021-02-04T07:57:49.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="年年岁岁，岁岁年年"><a href="#年年岁岁，岁岁年年" class="headerlink" title="年年岁岁，岁岁年年"></a>年年岁岁，岁岁年年</h2><p>岁岁年年，是时候回顾这一年的经历了。生活不易，疫情常在，全民抗疫，成为今年常谈的话题。既有为那些逆行者的感动、敬佩；又有为张桂梅从改变一个人到影响三代人的肃然起敬。可能是老了，越见不得，也越听不得这种感人肺腑的事迹，一见一听，保证鼻子发酸。活久见，诚如股神巴菲特，对美股熔断今年都是活久见，更何况似我们这类凡夫俗子。第一次经历如此可怕的疫情，第一次经历如此长久的假期。如果要对2020年做一个总结，只想说，平淡才是真。感恩国家的强大，感恩身边人都平平安安。</p><h2 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h2><p>The limits of your world are the limits of your language!<br>2021，勇往直前。</p><center><img src="http://dhsmp.nos-eastchina1.126.net/20210204035726-77974.jpg" alt=""></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;年年岁岁，岁岁年年&quot;&gt;&lt;a href=&quot;#年年岁岁，岁岁年年&quot; class=&quot;headerlink&quot; title=&quot;年年岁岁，岁岁年年&quot;&gt;&lt;/a&gt;年年岁岁，岁岁年年&lt;/h2&gt;&lt;p&gt;岁岁年年，是时候回顾这一年的经历了。生活不易，疫情常在，全民抗疫，成为今年常谈的话题
      
    
    </summary>
    
      <category term="随笔" scheme="http://denghs.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>2021年月度目标与进展</title>
    <link href="http://denghs.com/2020/12/31/annual-summary-2021/"/>
    <id>http://denghs.com/2020/12/31/annual-summary-2021/</id>
    <published>2020-12-31T11:08:36.000Z</published>
    <updated>2021-12-01T09:50:51.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1月"><a href="#1月" class="headerlink" title="1月"></a>1月</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li>复习《高等数学-工本》</li><li>完成《新概念英语-二》的学习</li><li>阅读《影响商业的50本书》</li></ul><h3 id="已完成"><a href="#已完成" class="headerlink" title="已完成"></a>已完成</h3><ul><li><del>《新概念英语-二》的学习</del></li><li><del>《高等数学-工本》</del></li></ul><h3 id="未完成"><a href="#未完成" class="headerlink" title="未完成"></a>未完成</h3><ul><li>阅读《影响商业的50本书》</li></ul><h2 id="2月"><a href="#2月" class="headerlink" title="2月"></a>2月</h2><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><ul><li>复习《高等数学-工本》</li><li>阅读《影响商业的50本书》</li></ul><h3 id="已完成-1"><a href="#已完成-1" class="headerlink" title="已完成"></a>已完成</h3><ul><li><del>复习《高等数学-工本》</del></li></ul><h3 id="未完成-1"><a href="#未完成-1" class="headerlink" title="未完成"></a>未完成</h3><ul><li>阅读《影响商业的50本书》</li></ul><h2 id="3月"><a href="#3月" class="headerlink" title="3月"></a>3月</h2><h3 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h3><ul><li>复习《高等数学-工本》</li><li>阅读《影响商业的50本书》</li></ul><h3 id="未完成-2"><a href="#未完成-2" class="headerlink" title="未完成"></a>未完成</h3><ul><li>复习《高等数学-工本》</li><li>阅读《影响商业的50本书》</li></ul><h2 id="4月"><a href="#4月" class="headerlink" title="4月"></a>4月</h2><h3 id="目标-3"><a href="#目标-3" class="headerlink" title="目标"></a>目标</h3><ul><li>复习《高等数学-工本》</li><li>参加考试《高等数学-工本》</li></ul><h3 id="已完成-2"><a href="#已完成-2" class="headerlink" title="已完成"></a>已完成</h3><ul><li><del>复习《高等数学-工本》</del></li></ul><h2 id="5月"><a href="#5月" class="headerlink" title="5月"></a>5月</h2><h3 id="目标-4"><a href="#目标-4" class="headerlink" title="目标"></a>目标</h3><ul><li>《深入理解Java虚拟机》</li></ul><h3 id="未完成-3"><a href="#未完成-3" class="headerlink" title="未完成"></a>未完成</h3><ul><li>《深入理解Java虚拟机》</li></ul><h3 id="已完成-3"><a href="#已完成-3" class="headerlink" title="已完成"></a>已完成</h3><ul><li><del>《高等数学-工本》已通过</del></li></ul><p><img src="http://dhsmp.nos-eastchina1.126.net/20210708084651-785369.jpg" alt=""></p><h2 id="6月"><a href="#6月" class="headerlink" title="6月"></a>6月</h2><h3 id="目标-5"><a href="#目标-5" class="headerlink" title="目标"></a>目标</h3><ul><li>《深入理解Java虚拟机》</li><li>《Spring Cloud微服务实战》</li></ul><h3 id="未完成-4"><a href="#未完成-4" class="headerlink" title="未完成"></a>未完成</h3><ul><li>《Spring Cloud微服务实战》</li></ul><h3 id="已完成-4"><a href="#已完成-4" class="headerlink" title="已完成"></a>已完成</h3><ul><li><del>《深入理解Java虚拟机》</del></li></ul><h2 id="7月"><a href="#7月" class="headerlink" title="7月"></a>7月</h2><h3 id="目标-6"><a href="#目标-6" class="headerlink" title="目标"></a>目标</h3><ul><li>《Spring Cloud微服务实战》</li><li>《新概念英语三》21-30课</li></ul><h3 id="未完成-5"><a href="#未完成-5" class="headerlink" title="未完成"></a>未完成</h3><ul><li>《新概念英语三》25-30课</li></ul><h3 id="已完成-5"><a href="#已完成-5" class="headerlink" title="已完成"></a>已完成</h3><ul><li><del>《Spring Cloud微服务实战》</del></li></ul><h2 id="8月"><a href="#8月" class="headerlink" title="8月"></a>8月</h2><h3 id="目标-7"><a href="#目标-7" class="headerlink" title="目标"></a>目标</h3><ul><li>《新概念英语三》25-30课</li><li>《英语二》Unit1-Unit5</li></ul><h3 id="未完成-6"><a href="#未完成-6" class="headerlink" title="未完成"></a>未完成</h3><ul><li>《新概念英语三》25-30课</li><li>《英语二》Unit1-Unit5</li></ul><h3 id="已完成-6"><a href="#已完成-6" class="headerlink" title="已完成"></a>已完成</h3><ul><li><del>《新概念英语三》25-28课</del></li><li><del>《英语二》Unit1-Unit5</del></li></ul><h2 id="9月"><a href="#9月" class="headerlink" title="9月"></a>9月</h2><h3 id="目标-8"><a href="#目标-8" class="headerlink" title="目标"></a>目标</h3><ul><li>《英语二》Unit5-Unit12</li></ul><h3 id="未完成-7"><a href="#未完成-7" class="headerlink" title="未完成"></a>未完成</h3><ul><li>《英语二》Unit5-Unit12</li></ul><h3 id="已完成-7"><a href="#已完成-7" class="headerlink" title="已完成"></a>已完成</h3><ul><li><del>《英语二》Unit5-Unit9</del></li></ul><h2 id="10月"><a href="#10月" class="headerlink" title="10月"></a>10月</h2><h3 id="目标-9"><a href="#目标-9" class="headerlink" title="目标"></a>目标</h3><ul><li>《英语二》Unit10-Unit12</li><li>通过10月《英语二》考试</li></ul><h3 id="已完成-8"><a href="#已完成-8" class="headerlink" title="已完成"></a>已完成</h3><ul><li><del>《英语二》Unit10-Unit12</del></li><li><del>通过10月《英语二》考试</del></li></ul><p><img src="http://dhsmp.nos-eastchina1.126.net/20211201054531-422377.jpg" alt=""></p><h2 id="11月"><a href="#11月" class="headerlink" title="11月"></a>11月</h2><h3 id="目标-10"><a href="#目标-10" class="headerlink" title="目标"></a>目标</h3><ul><li>《新概念英语三》30-40课</li><li>《Redis设计与实现》第二版</li></ul><h3 id="未完成-8"><a href="#未完成-8" class="headerlink" title="未完成"></a>未完成</h3><ul><li>《新概念英语三》35-40课</li><li>《Redis设计与实现》第二版</li></ul><h3 id="已完成-9"><a href="#已完成-9" class="headerlink" title="已完成"></a>已完成</h3><ul><li><del>《新概念英语三》30-34课</del></li></ul><h2 id="12月"><a href="#12月" class="headerlink" title="12月"></a>12月</h2><h3 id="目标-11"><a href="#目标-11" class="headerlink" title="目标"></a>目标</h3><ul><li>《新概念英语三》35-40课</li><li>《Redis设计与实现》第二版</li><li>申请毕业</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1月&quot;&gt;&lt;a href=&quot;#1月&quot; class=&quot;headerlink&quot; title=&quot;1月&quot;&gt;&lt;/a&gt;1月&lt;/h2&gt;&lt;h3 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h3&gt;&lt;ul&gt;
&lt;
      
    
    </summary>
    
      <category term="随想" scheme="http://denghs.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>2020年月度目标与进展</title>
    <link href="http://denghs.com/2019/12/31/annual-summary-2020/"/>
    <id>http://denghs.com/2019/12/31/annual-summary-2020/</id>
    <published>2019-12-31T11:08:36.000Z</published>
    <updated>2020-03-09T08:40:03.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1月"><a href="#1月" class="headerlink" title="1月"></a>1月</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li>自学教材《高等数学-工专》</li><li>复习《计算机网络管理》</li><li>再读《深入理解Java虚拟机》</li><li>阅读《经济学通识》</li><li>阅读《你有你的计划，世界另有计划》</li></ul><h3 id="已完成"><a href="#已完成" class="headerlink" title="已完成"></a>已完成</h3><ul><li><del>自学教材《高等数学-工专》</del></li></ul><h3 id="未完成"><a href="#未完成" class="headerlink" title="未完成"></a>未完成</h3><ul><li>复习《计算机网络管理》</li><li>再读《深入理解Java虚拟机》</li><li>阅读《经济学通识》</li><li>阅读《你有你的计划，世界另有计划》</li></ul><h2 id="2月"><a href="#2月" class="headerlink" title="2月"></a>2月</h2><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><ul><li>自学教材《高等数学-工本》</li><li>复习《计算机网络管理》</li><li>阅读《经济学通识》</li><li>阅读《你想活出怎样的人生》</li></ul><h3 id="未完成-1"><a href="#未完成-1" class="headerlink" title="未完成"></a>未完成</h3><ul><li>自学教材《高等数学-工本》</li><li>复习《计算机网络管理》</li><li>阅读《经济学通识》</li><li>阅读《你想活出怎样的人生》</li></ul><h2 id="3月"><a href="#3月" class="headerlink" title="3月"></a>3月</h2><h3 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h3><ul><li>自学教材《高等数学-工本》</li><li>复习《计算机网络管理》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1月&quot;&gt;&lt;a href=&quot;#1月&quot; class=&quot;headerlink&quot; title=&quot;1月&quot;&gt;&lt;/a&gt;1月&lt;/h2&gt;&lt;h3 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h3&gt;&lt;ul&gt;
&lt;
      
    
    </summary>
    
      <category term="随想" scheme="http://denghs.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
  </entry>
  
</feed>
